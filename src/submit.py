import json
import requests

def submit(results: dict, groupname: str, url: str = "http://tatooine.disi.unitn.it:3001/retrieval/") -> float | None:
    """
    Submits image retrieval results to the competition server.

    Args:
        results (dict): A dictionary containing the image retrieval results
                        for a single epoch, typically generated by an evaluation script.
        groupname (str): The name of your submission group/team.
        url (str): The URL of the competition submission API endpoint.

    Returns:
        float | None: The accuracy score received from the server if the submission
                      is successful and accuracy is found. Returns None otherwise.
    """
    payload = {
        "groupname": groupname,
        "images": results
    }
    
    try:
        # Use json=payload directly; requests handles serialization and headers
        response = requests.post(url, json=payload) 
        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)

        result = json.loads(response.text)
        
        accuracy = result.get('accuracy') # Safely get the accuracy key
        if accuracy is not None:
            print(f"accuracy is {accuracy}")
            return accuracy # <--- THIS IS THE CRUCIAL LINE: Return the accuracy!
        else:
            print(f"ERROR: 'accuracy' key not found in response from server: {response.text}")
            return None # Return None if accuracy is missing in the successful response
            
    except requests.exceptions.HTTPError as http_err:
        print(f"ERROR: HTTP error occurred: {http_err} - Server response: {response.text if 'response' in locals() else 'N/A'}")
        return None
    except requests.exceptions.ConnectionError as conn_err:
        print(f"ERROR: Connection error occurred: {conn_err}. Is the server running and accessible?")
        return None
    except requests.exceptions.Timeout as timeout_err:
        print(f"ERROR: Timeout error occurred: {timeout_err}")
        return None
    except requests.exceptions.RequestException as req_err:
        print(f"ERROR: An unexpected request error occurred: {req_err}")
        return None
    except json.JSONDecodeError:
        print(f"ERROR: Invalid JSON response from server: {response.text if 'response' in locals() else 'N/A'}")
        return None
    except Exception as e:
        print(f"ERROR: An unexpected error occurred during submission: {e}")
        return None

